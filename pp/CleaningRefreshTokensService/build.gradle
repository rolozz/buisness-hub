plugins {
    id 'jacoco'
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.owasp.dependencycheck" version "9.0.9"
    id 'checkstyle'
}

// Apply Checkstyle configuration from the specified file
apply from: "${project.projectDir.parentFile}/config/checkstyle/checkstyle.gradle"


jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

dependencyCheck {
    autoUpdate = true
    format = 'HTML'
    check.dependsOn dependencyCheckAnalyze
}


group 'business.hub'
version '0.0.1-SNAPSHOT'


java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "2023.0.0-RC1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.0-M1'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

}
jar {
    manifest {
        attributes(
                'Main-Class': 'business.hub.cleaningrefreshtokensservice.CleaningRefreshTokensServiceApplication'
        )
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.00
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

tasks.named('test') {
    useJUnitPlatform()
}
